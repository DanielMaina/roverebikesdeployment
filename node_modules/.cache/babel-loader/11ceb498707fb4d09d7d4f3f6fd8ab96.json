{"ast":null,"code":"const TOKEN_KEY = 'REACTAPP.TOKEN';\nconst USER = 'REACTAPP.USER';\nconst REFRESH_TOKEN_KEY = 'REACTAPP.REFRESH_TOKEN';\n/**\n * Manage the how Access Tokens are being stored and retreived from storage.\n *\n * Current implementation stores to localStorage. Local Storage should always be\n * accessed through this instace.\n**/\n\nconst TokenService = {\n  getToken() {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n\n  saveToken(accessToken) {\n    localStorage.setItem(TOKEN_KEY, accessToken);\n  },\n\n  removeToken() {\n    localStorage.removeItem(TOKEN_KEY);\n  },\n\n  getRefreshToken() {\n    return localStorage.getItem(REFRESH_TOKEN_KEY);\n  },\n\n  saveRefreshToken(refreshToken) {\n    localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);\n  },\n\n  removeRefreshToken() {\n    localStorage.removeItem(REFRESH_TOKEN_KEY);\n  }\n\n};\nconst SetUser = {\n  getUser() {\n    let user = localStorage.getItem(USER);\n    return JSON.parse(user);\n  },\n\n  isAdmin() {\n    let user = this.getUser();\n    return user != null ? user.role == 'admin' : false;\n  },\n\n  saveUser(user) {\n    localStorage.setItem(USER, JSON.stringify(user));\n  },\n\n  removeUser() {\n    localStorage.removeItem(USER);\n  }\n\n};\nexport { TokenService, SetUser };","map":{"version":3,"sources":["/Users/danielmaina/Downloads/rover-ebike-master/src/services/storage.service.js"],"names":["TOKEN_KEY","USER","REFRESH_TOKEN_KEY","TokenService","getToken","localStorage","getItem","saveToken","accessToken","setItem","removeToken","removeItem","getRefreshToken","saveRefreshToken","refreshToken","removeRefreshToken","SetUser","getUser","user","JSON","parse","isAdmin","role","saveUser","stringify","removeUser"],"mappings":"AAAA,MAAMA,SAAS,GAAG,gBAAlB;AACA,MAAMC,IAAI,GAAG,eAAb;AACA,MAAMC,iBAAiB,GAAG,wBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,GAAG;AACP,WAAOC,YAAY,CAACC,OAAb,CAAqBN,SAArB,CAAP;AACH,GAHgB;;AAKjBO,EAAAA,SAAS,CAACC,WAAD,EAAc;AACnBH,IAAAA,YAAY,CAACI,OAAb,CAAqBT,SAArB,EAAgCQ,WAAhC;AACH,GAPgB;;AASjBE,EAAAA,WAAW,GAAG;AACVL,IAAAA,YAAY,CAACM,UAAb,CAAwBX,SAAxB;AACH,GAXgB;;AAajBY,EAAAA,eAAe,GAAG;AACd,WAAOP,YAAY,CAACC,OAAb,CAAqBJ,iBAArB,CAAP;AACH,GAfgB;;AAiBjBW,EAAAA,gBAAgB,CAACC,YAAD,EAAe;AAC3BT,IAAAA,YAAY,CAACI,OAAb,CAAqBP,iBAArB,EAAwCY,YAAxC;AACH,GAnBgB;;AAqBjBC,EAAAA,kBAAkB,GAAG;AACjBV,IAAAA,YAAY,CAACM,UAAb,CAAwBT,iBAAxB;AACH;;AAvBgB,CAArB;AA2BA,MAAMc,OAAO,GAAG;AACZC,EAAAA,OAAO,GAAG;AACN,QAAIC,IAAI,GAAGb,YAAY,CAACC,OAAb,CAAqBL,IAArB,CAAX;AACA,WAAOkB,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;AACH,GAJW;;AAKZG,EAAAA,OAAO,GAAE;AACL,QAAIH,IAAI,GAAG,KAAKD,OAAL,EAAX;AACA,WAAOC,IAAI,IAAI,IAAR,GAAeA,IAAI,CAACI,IAAL,IAAa,OAA5B,GAAsC,KAA7C;AACH,GARW;;AASZC,EAAAA,QAAQ,CAACL,IAAD,EAAO;AACXb,IAAAA,YAAY,CAACI,OAAb,CAAqBR,IAArB,EAA2BkB,IAAI,CAACK,SAAL,CAAeN,IAAf,CAA3B;AACH,GAXW;;AAaZO,EAAAA,UAAU,GAAG;AACTpB,IAAAA,YAAY,CAACM,UAAb,CAAwBV,IAAxB;AACH;;AAfW,CAAhB;AAkBA,SAASE,YAAT,EAAuBa,OAAvB","sourcesContent":["const TOKEN_KEY = 'REACTAPP.TOKEN'\nconst USER = 'REACTAPP.USER'\nconst REFRESH_TOKEN_KEY = 'REACTAPP.REFRESH_TOKEN'\n\n/**\n * Manage the how Access Tokens are being stored and retreived from storage.\n *\n * Current implementation stores to localStorage. Local Storage should always be\n * accessed through this instace.\n**/\nconst TokenService = {\n    getToken() {\n        return localStorage.getItem(TOKEN_KEY)\n    },\n\n    saveToken(accessToken) {\n        localStorage.setItem(TOKEN_KEY, accessToken)\n    },\n\n    removeToken() {\n        localStorage.removeItem(TOKEN_KEY)\n    },\n\n    getRefreshToken() {\n        return localStorage.getItem(REFRESH_TOKEN_KEY)\n    },\n\n    saveRefreshToken(refreshToken) {\n        localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken)\n    },\n\n    removeRefreshToken() {\n        localStorage.removeItem(REFRESH_TOKEN_KEY)\n    }\n\n}\n\nconst SetUser = {\n    getUser() {\n        let user = localStorage.getItem(USER);\n        return JSON.parse(user)\n    },\n    isAdmin(){\n        let user = this.getUser();\n        return user != null ? user.role == 'admin' : false\n    },\n    saveUser(user) {\n        localStorage.setItem(USER, JSON.stringify(user));\n    },\n\n    removeUser() {\n        localStorage.removeItem(USER)\n    }\n}\n\nexport { TokenService, SetUser }"]},"metadata":{},"sourceType":"module"}